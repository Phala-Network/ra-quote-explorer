import {
  Cpu,
  Lock,
  Calendar,
  Shield,
  ShieldOff,
  Download,
  AlertTriangle,
} from "lucide-react";
import {
  Card,
  CardHeader,
  CardTitle,
  CardDescription,
  CardContent,
} from "@/components/ui/card";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Alert, AlertTitle, AlertDescription } from "@/components/ui/alert";
import { DownloadButton } from "@/components/download_button";
import { cn } from "@/lib/utils";
import { type TDXQuote } from "@/types";
import { TimeDisplay } from './time_display'

function hexToString(input: string): string {
 // Remove 0x prefix if exists
 const hex = input.startsWith('0x') ? input.slice(2) : input;
 
 // Convert hex to string and trim null bytes
 return Buffer.from(hex, 'hex')
   .toString()
   .replace(/\x00+$/, '');
}

const DcapVerificationStatus = ({ isVerified }: { isVerified: boolean }) => {
  return (
    <Alert
      variant={isVerified ? "default" : "destructive"}
      className={cn("mb-6", isVerified ? "bg-green-50" : "bg-yellow-50")}
    >
      <div className="flex items-center gap-3">
        {isVerified ? (
          <Shield className="h-5 w-5 text-green-500" />
        ) : (
          <ShieldOff className="h-5 w-5 text-red-500" />
        )}
        <div>
          <AlertTitle className="text-base font-semibold">
            {isVerified ? "VERIFIED" : "UNVERIFIED"}
          </AlertTitle>
          <AlertDescription className="text-sm mt-1">
            {isVerified
              ? "The attestation is verified and safe to use."
              : "This is an unverified attestation. It can be a mock attestation generated by a simulator, or produced by an invalid TEE."}
          </AlertDescription>
        </div>
      </div>
    </Alert>
  );
};

const ProofOfCloudNote = () => {
  return (
    <div className="mb-6 px-4 py-3 bg-yellow-50 border-2 border-yellow-400 rounded-lg">
      <div className="flex items-start gap-2.5">
        <AlertTriangle className="h-4 w-4 text-yellow-600 mt-0.5 flex-shrink-0" />
        <div className="flex-1">
          <p className="text-sm text-slate-700 leading-relaxed">
            <span className="font-semibold">Proof of Cloud:</span> This device is not in our verified facilities registry.{" "}
            <a
              href="https://proofofcloud.org"
              target="_blank"
              rel="noopener noreferrer"
              className="text-blue-600 hover:text-blue-800 underline font-medium"
            >
              Learn more
            </a>
          </p>
        </div>
      </div>
    </div>
  );
};

export function ReportDetail({ report }: { report: TDXQuote }) {
  const showProofOfCloudNote = report.verified && report.proof_of_cloud === false;

  return (
    <>
      <DcapVerificationStatus isVerified={report.verified} />
      {showProofOfCloudNote && <ProofOfCloudNote />}

      <Card className="mb-8 relative">
        <CardHeader>
          <CardTitle>Report Overview</CardTitle>
          <CardDescription>
            This is a {report.header.tee_type == 'TEE_TDX' ? 'Intel TDX' : 'Intel SGX'} DCAP attestation.
          </CardDescription>
          <div className="md:absolute top-4 right-6 flex flex-col md:flex-row gap-0.5">
            <DownloadButton
              url={`/raw/${report.checksum}`}
              name={`${report.checksum}_quote.bin`}
              isAvailable={!!report.can_download}
              className="w-40"
            >
              <Download className="h-4 w-4" />
              Download Quote
            </DownloadButton>
            <DownloadButton
              url={`/api/collateral/${report.checksum}`}
              name={`${report.checksum}_quote_collateral.json`}
              isAvailable={!!report.can_download}
              className="w-56"
            >
              <Download className="h-4 w-4" />
              Download Quote Collateral
            </DownloadButton>
          </div>
        </CardHeader>
        <CardContent>
          <div className="grid md:grid-cols-2 gap-4">
            <div className="flex items-center">
              <Shield className="mr-2 h-5 w-5 text-blue-500" />
              <span>Version: {report.header.version}</span>
            </div>
            <div className="flex items-center">
              <Calendar className="mr-2 h-5 w-5 text-green-500" />
              <span>AK Type: {report.header.ak_type}</span>
            </div>
            <div className="flex items-center">
              <Cpu className="mr-2 h-5 w-5 text-purple-500" />
              <span>TEE Type: {report.header.tee_type}</span>
            </div>
            <div className="flex items-center">
              <Lock className="mr-2 h-5 w-5 text-red-500" />
              <span>Uploaded At: <TimeDisplay isoString={report.uploaded_at} /></span>
            </div>
          </div>
        </CardContent>
      </Card>

      <Card className="mb-8">
        <CardHeader>
          <CardTitle>Report Data Raw Input</CardTitle>
        </CardHeader>
        <CardContent>
          <pre className="text-xs p-2.5 border border-gray-200 rounded bg-gray-100">
            {hexToString(report.body.reportdata)}
          </pre>
        </CardContent>
      </Card>

      <Card className="mb-8">
        <CardHeader>
          <CardTitle>Body Details</CardTitle>
        </CardHeader>
        <CardContent>
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Attribute</TableHead>
                <TableHead>Value</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {Object.entries(report.body).map(([key, value]) => (
                <TableRow key={key}>
                  <TableCell className="font-mono">{key}</TableCell>
                  <TableCell className="font-mono break-all">{value}</TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </CardContent>
      </Card>

      {report.cert_data ? (
        <Card>
          <CardHeader>
            <CardTitle>Certificate Data</CardTitle>
          </CardHeader>
          <CardContent>
            <pre className="font-mono break-all max-w-full overflow-x-scroll">{report.cert_data}</pre>
          </CardContent>
        </Card>
      ) : null}
    </>
  );
}
